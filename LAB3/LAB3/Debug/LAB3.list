
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003bc  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800050c  08000514  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  4 .ARM          00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800050c  08000514  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000514  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000514  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b97  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002cb  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000023a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000070  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e88  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dff  00000000  00000000  0001b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008475c  00000000  00000000  0001c13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a089b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  000a08e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a0a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	080004f4 	.word	0x080004f4

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	080004f4 	.word	0x080004f4

08000190 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	f003 021f 	and.w	r2, r3, #31
 80001a0:	4906      	ldr	r1, [pc, #24]	@ (80001bc <NVIC_EnableIRQ+0x2c>)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	095b      	lsrs	r3, r3, #5
 80001a8:	2001      	movs	r0, #1
 80001aa:	fa00 f202 	lsl.w	r2, r0, r2
 80001ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	e000e100 	.word	0xe000e100

080001c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80001cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	da0b      	bge.n	80001ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	490c      	ldr	r1, [pc, #48]	@ (800020c <NVIC_SetPriority+0x4c>)
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 030f 	and.w	r3, r3, #15
 80001e0:	3b04      	subs	r3, #4
 80001e2:	0112      	lsls	r2, r2, #4
 80001e4:	b2d2      	uxtb	r2, r2
 80001e6:	440b      	add	r3, r1
 80001e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ea:	e009      	b.n	8000200 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <NVIC_SetPriority+0x50>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	0112      	lsls	r2, r2, #4
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	440b      	add	r3, r1
 80001fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000ed00 	.word	0xe000ed00
 8000210:	e000e100 	.word	0xe000e100

08000214 <exti_init>:
#define LEDA0		(PINA0)
#define PINA1		(0x1<<1)
#define LEDA1		(PINA1)


void exti_init(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000218:	b672      	cpsid	i
}
 800021a:	bf00      	nop

	//Disable Global Interrupts
	__disable_irq();
	//Enable Clock Access to Ports
	RCC->APB2ENR |= GPIOAEN; // Enable RCC reach to GPIOA Ports with Advance Peripheral Bus 2 [Input Configuration]
 800021c:	4b32      	ldr	r3, [pc, #200]	@ (80002e8 <exti_init+0xd4>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a31      	ldr	r2, [pc, #196]	@ (80002e8 <exti_init+0xd4>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= GPIOBEN;
 8000228:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <exti_init+0xd4>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a2e      	ldr	r2, [pc, #184]	@ (80002e8 <exti_init+0xd4>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6193      	str	r3, [r2, #24]

	//Set PA0 and PA1 as input
	GPIOA->CRL &= ~(0xF<<0);
 8000234:	4b2d      	ldr	r3, [pc, #180]	@ (80002ec <exti_init+0xd8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a2c      	ldr	r2, [pc, #176]	@ (80002ec <exti_init+0xd8>)
 800023a:	f023 030f 	bic.w	r3, r3, #15
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x2<<2); // PA0 Input with pull-up / pull-down
 8000240:	4b2a      	ldr	r3, [pc, #168]	@ (80002ec <exti_init+0xd8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a29      	ldr	r2, [pc, #164]	@ (80002ec <exti_init+0xd8>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF<<8);
 800024c:	4b28      	ldr	r3, [pc, #160]	@ (80002f0 <exti_init+0xdc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a27      	ldr	r2, [pc, #156]	@ (80002f0 <exti_init+0xdc>)
 8000252:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000256:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x2<<10); // PB2 Input with pull-up / pull-down
 8000258:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <exti_init+0xdc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a24      	ldr	r2, [pc, #144]	@ (80002f0 <exti_init+0xdc>)
 800025e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000262:	6013      	str	r3, [r2, #0]

	/*Our EXTI is a part of SYSCONFIG (SYSCFG) module, so we need to enable access for that module
	as well In F1 Series, we need to enable the AFIO bit in the RCC_APB2ENR Register*/
	RCC->APB2ENR |= AFIOEN;
 8000264:	4b20      	ldr	r3, [pc, #128]	@ (80002e8 <exti_init+0xd4>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a1f      	ldr	r2, [pc, #124]	@ (80002e8 <exti_init+0xd4>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6193      	str	r3, [r2, #24]

	//Select PORTA for EXTI0 (Input Interrupt Setup)
	AFIO->EXTICR[0] &= ~(0xF<<0); //Selection of the source input for EXTI0 external interrupt. (0000: PA[x] pin)
 8000270:	4b20      	ldr	r3, [pc, #128]	@ (80002f4 <exti_init+0xe0>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a1f      	ldr	r2, [pc, #124]	@ (80002f4 <exti_init+0xe0>)
 8000276:	f023 030f 	bic.w	r3, r3, #15
 800027a:	6093      	str	r3, [r2, #8]

	//Select PORTA for EXTI1 (Input Interrupt Setup)
	AFIO->EXTICR[0] &= ~(0xF<<8); //Selection of the source input for EXTI2 external interrupt. (0001: PB[x] pin)
 800027c:	4b1d      	ldr	r3, [pc, #116]	@ (80002f4 <exti_init+0xe0>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a1c      	ldr	r2, [pc, #112]	@ (80002f4 <exti_init+0xe0>)
 8000282:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000286:	6093      	str	r3, [r2, #8]
	AFIO->EXTICR[0] |= (0x1<<8);
 8000288:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <exti_init+0xe0>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a19      	ldr	r2, [pc, #100]	@ (80002f4 <exti_init+0xe0>)
 800028e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000292:	6093      	str	r3, [r2, #8]

	//Unmask EXTI0
	EXTI->IMR |= IMR0; //It means "Interrupt request from Line 0 is not masked (ignored)"
 8000294:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <exti_init+0xe4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a17      	ldr	r2, [pc, #92]	@ (80002f8 <exti_init+0xe4>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

	//Unmask EXTI2
	EXTI->IMR |= IMR2; //It means "Interrupt request from Line 2 is not masked (ignored)"
 80002a0:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <exti_init+0xe4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a14      	ldr	r2, [pc, #80]	@ (80002f8 <exti_init+0xe4>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6013      	str	r3, [r2, #0]

	/*Decide whether input interrupts will be triggered by rising edge or falling edge.
	Over here we will use rising edge trigger*/
	EXTI->RTSR |= RTSR0; // Rising trigger enabled (for Event and Interrupt) for input line 0.
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <exti_init+0xe4>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a11      	ldr	r2, [pc, #68]	@ (80002f8 <exti_init+0xe4>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= RTSR2; // Rising trigger enabled (for Event and Interrupt) for input line 2.
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <exti_init+0xe4>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <exti_init+0xe4>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6093      	str	r3, [r2, #8]

	//Set Priority between buttons
	  //PORTA0 has more priority than PORTA1
	NVIC_SetPriority(EXTI0_IRQn, 1);
 80002c4:	2101      	movs	r1, #1
 80002c6:	2006      	movs	r0, #6
 80002c8:	f7ff ff7a 	bl	80001c0 <NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn, 2);
 80002cc:	2102      	movs	r1, #2
 80002ce:	2008      	movs	r0, #8
 80002d0:	f7ff ff76 	bl	80001c0 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002d4:	2006      	movs	r0, #6
 80002d6:	f7ff ff5b 	bl	8000190 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 80002da:	2008      	movs	r0, #8
 80002dc:	f7ff ff58 	bl	8000190 <NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002e0:	b662      	cpsie	i
}
 80002e2:	bf00      	nop
	//Enable Global Interrupts
	__enable_irq();

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	40010000 	.word	0x40010000
 80002f8:	40010400 	.word	0x40010400

080002fc <main>:
void EXTI2_IRQHandler(void);
static void exti0_callback(void);
static void exti1_callback(void);

// Main function
int main(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Enable GPIOC clock
    RCC->APB2ENR |= GPIOCEN;
 8000300:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <main+0x34>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <main+0x34>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]

    // Configure PC13 as output (max speed 10 MHz)
    GPIOC->CRH &= ~(0xF << 20);
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <main+0x38>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <main+0x38>)
 8000312:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000316:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= (0x1 << 20);
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <main+0x38>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <main+0x38>)
 800031e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000322:	6053      	str	r3, [r2, #4]

    // Initialize SysTick and EXTI
    systick_init();
 8000324:	f000 f808 	bl	8000338 <systick_init>
    exti_init();
 8000328:	f7ff ff74 	bl	8000214 <exti_init>

    while (1) {
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <main+0x30>
 8000330:	40021000 	.word	0x40021000
 8000334:	40011000 	.word	0x40011000

08000338 <systick_init>:
        // Main loop does nothing; interrupt handlers manage behavior
    }
}

// SysTick initialization for 1 ms ticks
void systick_init(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    SysTick->LOAD = 9000; // 1 ms per tick
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <systick_init+0x20>)
 800033e:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000342:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <systick_init+0x20>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 800034a:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <systick_init+0x20>)
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e010 	.word	0xe000e010

0800035c <SysTick_Handler>:

// SysTick handler to increment the ms_ticks counter
void SysTick_Handler(void) {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
    ms_ticks++;
 8000360:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <SysTick_Handler+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a03      	ldr	r2, [pc, #12]	@ (8000374 <SysTick_Handler+0x18>)
 8000368:	6013      	str	r3, [r2, #0]
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	2000001c 	.word	0x2000001c

08000378 <exti0_callback>:

// Callback for EXTI0 interrupt (LED ON)
static void exti0_callback(void) {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
    GPIOC->BSRR |= LEDC13; // Turn LED ON
 800037c:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <exti0_callback+0x18>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a03      	ldr	r2, [pc, #12]	@ (8000390 <exti0_callback+0x18>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000386:	6113      	str	r3, [r2, #16]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40011000 	.word	0x40011000

08000394 <exti1_callback>:

// Callback for EXTI2 interrupt (LED OFF)
static void exti1_callback(void) {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
    GPIOC->BSRR |= LEDC13_R; // Turn LED OFF
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <exti1_callback+0x18>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	4a03      	ldr	r2, [pc, #12]	@ (80003ac <exti1_callback+0x18>)
 800039e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80003a2:	6113      	str	r3, [r2, #16]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40011000 	.word	0x40011000

080003b0 <EXTI0_IRQHandler>:

// EXTI0 interrupt handler
void EXTI0_IRQHandler(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
    if ((EXTI->PR & LINE0) != 0) { // Check if interrupt is from line 0
 80003b6:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <EXTI0_IRQHandler+0x48>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d015      	beq.n	80003ee <EXTI0_IRQHandler+0x3e>
        uint32_t current_time = ms_ticks;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <EXTI0_IRQHandler+0x4c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	607b      	str	r3, [r7, #4]
        if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 80003c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <EXTI0_IRQHandler+0x50>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	f242 3228 	movw	r2, #9000	@ 0x2328
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d90a      	bls.n	80003ee <EXTI0_IRQHandler+0x3e>
            last_interrupt_time = current_time;
 80003d8:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <EXTI0_IRQHandler+0x50>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6013      	str	r3, [r2, #0]
            EXTI->PR |= LINE0; // Clear pending interrupt flag
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <EXTI0_IRQHandler+0x48>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a05      	ldr	r2, [pc, #20]	@ (80003f8 <EXTI0_IRQHandler+0x48>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]
            exti0_callback();  // Call callback function
 80003ea:	f7ff ffc5 	bl	8000378 <exti0_callback>
        }
    }
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	2000001c 	.word	0x2000001c
 8000400:	20000020 	.word	0x20000020

08000404 <EXTI2_IRQHandler>:

// EXTI2 interrupt handler
void EXTI2_IRQHandler(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
    if ((EXTI->PR & LINE2) != 0) { // Check if interrupt is from line 2
 800040a:	4b10      	ldr	r3, [pc, #64]	@ (800044c <EXTI2_IRQHandler+0x48>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f003 0304 	and.w	r3, r3, #4
 8000412:	2b00      	cmp	r3, #0
 8000414:	d015      	beq.n	8000442 <EXTI2_IRQHandler+0x3e>
        uint32_t current_time = ms_ticks;
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <EXTI2_IRQHandler+0x4c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	607b      	str	r3, [r7, #4]
        if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <EXTI2_IRQHandler+0x50>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000428:	4293      	cmp	r3, r2
 800042a:	d90a      	bls.n	8000442 <EXTI2_IRQHandler+0x3e>
            last_interrupt_time = current_time;
 800042c:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <EXTI2_IRQHandler+0x50>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6013      	str	r3, [r2, #0]
            EXTI->PR |= LINE2; // Clear pending interrupt flag
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <EXTI2_IRQHandler+0x48>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a05      	ldr	r2, [pc, #20]	@ (800044c <EXTI2_IRQHandler+0x48>)
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	6153      	str	r3, [r2, #20]
            exti1_callback();  // Call callback function
 800043e:	f7ff ffa9 	bl	8000394 <exti1_callback>
        }
    }
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010400 	.word	0x40010400
 8000450:	2000001c 	.word	0x2000001c
 8000454:	20000020 	.word	0x20000020

08000458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000458:	480d      	ldr	r0, [pc, #52]	@ (8000490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800045c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	@ (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	@ (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	@ (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000486:	f000 f811 	bl	80004ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff ff37 	bl	80002fc <main>

0800048e <LoopForever>:

LoopForever:
  b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   r0, =_estack
 8000490:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800049c:	08000514 	.word	0x08000514
  ldr r2, =_sbss
 80004a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a4:	20000024 	.word	0x20000024

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <__libc_init_array>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2600      	movs	r6, #0
 80004b0:	4d0c      	ldr	r5, [pc, #48]	@ (80004e4 <__libc_init_array+0x38>)
 80004b2:	4c0d      	ldr	r4, [pc, #52]	@ (80004e8 <__libc_init_array+0x3c>)
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	42a6      	cmp	r6, r4
 80004ba:	d109      	bne.n	80004d0 <__libc_init_array+0x24>
 80004bc:	f000 f81a 	bl	80004f4 <_init>
 80004c0:	2600      	movs	r6, #0
 80004c2:	4d0a      	ldr	r5, [pc, #40]	@ (80004ec <__libc_init_array+0x40>)
 80004c4:	4c0a      	ldr	r4, [pc, #40]	@ (80004f0 <__libc_init_array+0x44>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	42a6      	cmp	r6, r4
 80004cc:	d105      	bne.n	80004da <__libc_init_array+0x2e>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d4:	4798      	blx	r3
 80004d6:	3601      	adds	r6, #1
 80004d8:	e7ee      	b.n	80004b8 <__libc_init_array+0xc>
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	4798      	blx	r3
 80004e0:	3601      	adds	r6, #1
 80004e2:	e7f2      	b.n	80004ca <__libc_init_array+0x1e>
 80004e4:	0800050c 	.word	0x0800050c
 80004e8:	0800050c 	.word	0x0800050c
 80004ec:	0800050c 	.word	0x0800050c
 80004f0:	08000510 	.word	0x08000510

080004f4 <_init>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr

08000500 <_fini>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr
